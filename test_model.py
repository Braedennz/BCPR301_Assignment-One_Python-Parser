import unittest
import model
import python_controller
import os
import csv_plugin
import uml_output
import sys


class ModelTestCase(unittest.TestCase):
    """
    Tests for 'model.py'
    """

    individual_file_upload = [os.getcwd() + "\plants.py"]

    def test_individual_file_processed(self):
        """
        Is individual module created after processing of file?
        Author: Braeden
        """
        file_processor = model.FileProcessor()
        modules = file_processor.process_files(self.individual_file_upload)

        self.assertTrue(modules == 1)

    def test_class_name(self):
        """
        Checks plants.py class names have been appended correctly
        Author: Braeden
        """
        file_processor = model.FileProcessor()
        file_processor.process_files(self.individual_file_upload)

        self.assertTrue(file_processor.modules['plants'][0].name is 'Orchid')

    def test_parser(self):
        """
        Checks if creation of UML diagram and output to DOT file works
        Author: Braeden
        """
        ctrl = python_controller.Controller

        self.assertTrue(ctrl.run_parser(self.individual_file_upload, False, False) is True)

    def test_output_to_png(self):
        """
        Checks if creation of UML diagram and output to PNG file works
        Author: Braeden
        """
        ctrl = python_controller.Controller
        self.assertTrue(ctrl.do_output_to_png(None) is 0)

    def test_file_change(self):
        """
        Checks if file names that are stored from system
        arguments can be changed by function
        Author: Braeden
        """
        ctrl = python_controller.Controller
        ctrl.do_change_python_files(ctrl, "file_one.py file_two.py")

        self.assertTrue(ctrl.args[0] == "file_one.py")

# Tests for csv_plugin.py
# Author Peter

    def csv_test_01_true_input(self):
        testclass = csv_plugin.CSV_handler()
        example_type = dict()
        expected = type(example_type)
        actual = type(testclass.open_file('myclass.csv'))
        self.assertEqual(expected, actual)

    def csv_test_02_false_input(self):
        testclass = csv_plugin.CSV_handler()
        expected = False
        actual = testclass.open_file('dreaming.csv')
        self.assertEqual(expected, actual, "Expected {} got {}".format(expected, actual))        

    def csv_test_03_compare_output(self):
        # Compares plugin output with output generated by model
        data_for_model = ['LinkedListNode.py']
        newModelData = model.FileProcessor()
        newModelData.process_files(data_for_model)
        model_data_module = newModelData.get_modules()
        testclass = csv_plugin.CSV_handler()
        expected = testclass.write_csv_file(model_data_module, 'testdatafile02.csv')
        test_module = testclass.open_file('test_data_file1.csv')
        

    def csv_test_04_compare_csv_with_output_file(self):
        #compares a file already in csv form with a newly generated file based on the original
        import filecmp
        testclass = csv_plugin.CSV_handler()
        input_file = 'myclass.csv'
        output_file = 'test_compare_file.csv'
        module = testclass.open_file(input_file)
        testclass.write_csv_file(module , output_file)
        expected = True
        actual = filecmp.cmp(input_file, output_file, True)
        self.assertEqual(expected,actual)
        
# Tests for python code validator
# Author Peter

    def code_validator_test_01_true_input(self):
        testclass = py_cv.CodeValidator()
        filename = 'LinkedListNode.py'
        expected = True
        actual = testclass.validate_file(filename)
        self.assertEqual(expected, actual)

    def code_validator_test_02_false_input(self):
        testclass = py_cv.CodeValidator()
        filename = 'NoSuchPythonFile.py'
        expected = False
        actual = testclass.validate_file(filename)
        self.assertEqual(expected, actual)

    def code_validator_test_03_multiple_correct_files(self):
        testclass = py_cv.CodeValidator()
        input_list = ['LinkedListNode.py','plants.py','csv_plugin.py']
        expected = 3
        actual = len(testclass.validate_files(input_list))
        self.assertEqual(expected, actual)

    def code_validator_test_04_multiple_incorrect_files(self):
        testclass = py_cv.CodeValidator()
        input_list = ['LinkedListNode','plants','csv_plugin']
        expected = 0
        actual = len(testclass.validate_files(input_list))
        self.assertEqual(expected, actual)

    def code_validator_test_05_multiple_mixed_files(self):
        testclass = py_cv.CodeValidator()
        input_list = ['LinkedListNode.py','plants.py','csv_plugin']
        expected = 2
        actual = len(testclass.validate_files(input_list))
        self.assertEqual(expected, actual)


if __name__ == '__main__':
    unittest.main()
